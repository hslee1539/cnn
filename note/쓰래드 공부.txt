기본적으로 A함수는 동기화 없이 각각 구역을 분할해서 중복이나 충돌 없이 분할 계산을 함.
A함수는 몇십만번 반복됨.

1. 처음 방법
A를 쓰래드에 처리하고 join으로 기다림

장점:
구현이 간단
단점:
계산하고자 하는 것이 오래 걸리는 작업이면 성능 항상이 크지만,
빨리 계산되는 경우, Thread 생성하고 join하는 시간이 넘사벽으로 자원 소비를 함

2. 두번째 방법
2개의 쓰래드 그룹을 만듬.
A,B 그룹이 있으면, A는 B의 쓰래드 id를 가지고, B도 A의 id를 가짐.
쓰래드가 실행되면, 다른 그룹의 id를 join함.

단점:
쓰래드 내부에서 다른 쓰래드의 join이 안됨.

3. 새번째 방법
쓰래드를 먼저 가동하고 사용자가 원하는 지점에 쓰래드를 종료하는 방식.
변수가 특정 값을 가질때까지 대기하다가 A를 실행하는 방식 (데드락)
장점:
속도가 엄청 빠름
A가 출동 없이 잘 실행됨.
단점:
조금만 반복할 경우, 쓰래드 내부 while문 조건문 값을 false로 만들어 종료가 되지만,
몇십만번 반복하면 이 값을 false로 만들어도 계속 작동함.
메인 쓰래드에서 무한 반복으로 이 값을 false로 바꾸어도 마찬가지...

4. 네번째 방법
위와 동일한데,
2개의 뮤텍스를 이용함. 하나는 시작에 대한 락이고, 나머지는 A에 대한 락임.
장점:
속도가 엄청 빠름.
단점:



지금 하고 있는 방법.
쓰래드에서는 제어에 대한 변수를 읽기만 함.